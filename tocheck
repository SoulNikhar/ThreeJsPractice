//#region  import abd Helper
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(0, 20, 50);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const controls = new OrbitControls(camera, renderer.domElement);

function pointsIdentification(x, y) {
  const ch = new THREE.SphereGeometry(0.5);
  const chmat = new THREE.MeshPhysicalMaterial({ color: "blue" });
  const chmesh = new THREE.Mesh(ch, chmat);
  chmesh.position.set(x, y);
  scene.add(chmesh);
}

// White directional light at half intensity shining from the top.
const directionalTop = new THREE.DirectionalLight(0xffffff, 1);
directionalTop.position.set(0, 50, 0);
scene.add(directionalTop);

const directionalDown = new THREE.DirectionalLight(0xffffff, 1);
directionalDown.position.set(0, -20, -50);
scene.add(directionalDown);

const directionalRight = new THREE.DirectionalLight(0xffffff, 1);
directionalRight.position.set(50, 0, 50);
scene.add(directionalRight);

const directionalLight4 = new THREE.DirectionalLight(0xffffff, 1);
directionalLight4.position.set(-50, 0, 0);
scene.add(directionalLight4);

//#endregion

//#region Handle (fun 20 - 23 )
const turnRight = 0;

//LOCK BASE
function fun20() {
  const x_handle_Position = 0,
    y_handle_Position = 0,
    z_handle_Position = 0;
  const width = 10,
    height = 29,
    radius = 7;
  const path = new THREE.Shape();
  const origin = new THREE.Vector2(0, 0);
  path.moveTo(origin.x, origin.y + height / 2);
  path.absarc(
    origin.x,
    origin.y + radius,
    radius,
    Math.PI * 1.5,
    Math.PI / 2,
    false
  );
  path.quadraticCurveTo(
    origin.x - 5,
    origin.y + radius * 2,
    origin.x - 5,
    origin.y + radius * 2 + height / 4
  );
  path.lineTo(origin.x - width, origin.y + radius * 2 + height / 4);
  path.lineTo(origin.x - width, origin.y - height / 4);
  path.lineTo(origin.x - 5, origin.y - height / 4);
  path.quadraticCurveTo(origin.x - 5, origin.y, origin.x, origin.y);

  const LockExtrude = 5;
  const extrudeSettings = { depth: LockExtrude, bevelEnabled: false };
  const geo = new THREE.ExtrudeGeometry(path, extrudeSettings);
  const geoMat = new THREE.MeshPhysicalMaterial({ color: "#e4e6e8" });
  const mesh = new THREE.Mesh(geo, geoMat);
  mesh.position.set(x_handle_Position, y_handle_Position, z_handle_Position);
  // scene.add(mesh);
  const geometry = new THREE.CylinderGeometry(6, 6, 20, 32);
  const material = new THREE.MeshPhysicalMaterial({ color: '#e4e6e8' });
  const cylinder = new THREE.Mesh(geometry, material);
  cylinder.position.set(10, 0, 0);
  scene.add(cylinder);
  
  const geometry2 = new THREE.CylinderGeometry(6, 6, 20, 32);
  const material2 = new THREE.MeshPhysicalMaterial({ color: '#e4e6e8' });
  const cylinder2 = new THREE.Mesh(geometry2, material2);
  scene.add(cylinder2);
  cylinder2.rotation.z = Math.PI / 2;
  cylinder2.position.set(-10, 20, 0);
  
  // Add a torus geometry to blend the intersection
  const torusGeometry = new THREE.TorusGeometry(10, 6, 16, 100 , Math.PI / 2 );
  const torusMaterial = new THREE.MeshPhysicalMaterial({ color: '#e4e6e8', wireframe: false });
  const torus = new THREE.Mesh(torusGeometry, torusMaterial);
  
  // Position the torus at the intersection of the two cylinders
  torus.position.set(0, 10, 0); // Adjust position as needed
  scene.add(torus);

}  

fun20();

//#region Render

window.addEventListener("resize", () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

function animate() {
  requestAnimationFrame(animate);
  renderer.render(scene, camera);
}
animate();

//#endregion
