//#region  import abd Helper
import * as THREE from 'three';
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 0, 300);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const controls = new OrbitControls(camera, renderer.domElement);

function pointsIdentification(x, y) {
    const ch = new THREE.SphereGeometry(0.5)
    const chmat = new THREE.MeshBasicMaterial({ color: 'blue' })
    const chmesh = new THREE.Mesh(ch, chmat);
    chmesh.position.set(x, y);
    scene.add(chmesh)
}

//#endregion



//#region Handle (fun 20 - 23 )
const turnRight = false;




function fun20() {
    const width = 10, height = 29, radius = 7;
    const path = new THREE.Shape();
    const origin = new THREE.Vector2(0, 0);
    
    path.moveTo(origin.x, origin.y + height / 2);
    path.absarc(origin.x, origin.y + radius, radius, Math.PI * 1.5, Math.PI / 2, false);
    path.quadraticCurveTo(origin.x - 5, origin.y + radius * 2, origin.x - 5, origin.y + radius * 2 + height / 4);
    path.lineTo(origin.x - width, origin.y + radius * 2 + height / 4);
    path.lineTo(origin.x - width, origin.y - height / 4);
    path.lineTo(origin.x - 5, origin.y - height / 4);
    path.quadraticCurveTo(origin.x - 5, origin.y, origin.x, origin.y);
    
    const extrudeSettings = { depth: 5, bevelEnabled: false };
    const geo = new THREE.ExtrudeGeometry(path, extrudeSettings);
    const geoMat = new THREE.MeshNormalMaterial({ wireframe: false });
    const mesh = new THREE.Mesh(geo, geoMat);
    mesh.position.set(0, 56, -11);
    scene.add(mesh);

    const circle1 = new THREE.Mesh(new THREE.CircleGeometry(1.5), new THREE.MeshBasicMaterial({ wireframe: false }));
    const circle2 = new THREE.Mesh(new THREE.CircleGeometry(1.5), new THREE.MeshBasicMaterial({ wireframe: false }));
    circle1.position.set(-7, 52, -5.9);
    circle2.position.set(-7, 72, -5.9);
    mesh.add(circle1);
    mesh.add(circle2);

    if (turnRight) {
        mesh.rotateY(Math.PI);
        mesh.position.set(5, 56, -6);
        circle1.position.set(12.5, 52, -5.9);
        circle2.position.set(12.5, 72, -5.9);
    }

    return mesh;
}

function fun21() {
    const depth = 5, width = 30, height = 50;
    const path = new THREE.Shape();
    const origin = new THREE.Vector2(0, 0);
    
    path.moveTo(origin.x, origin.y);
    path.absarc(origin.x + depth / 2, origin.y, depth / 2, Math.PI, 0, false);
    path.lineTo(origin.x + depth, origin.y + height);
    path.lineTo(origin.x, origin.y + height);

    const extrudeSettings = { depth: 2, bevelEnabled: false };
    const geo = new THREE.ExtrudeGeometry(path, extrudeSettings);
    const geoMat = new THREE.MeshBasicMaterial({ color: 'green', wireframe: false });
    const mesh = new THREE.Mesh(geo, geoMat);

    return mesh;
}

function fun22() {
    const innerRadius = 3, deep = 2;
    const path = new THREE.Shape();
    const origin = new THREE.Vector2(0, 50);
    
    path.moveTo(origin.x, origin.y);
    path.absarc(origin.x + innerRadius, origin.y, innerRadius, Math.PI, Math.PI / 2, true);
    path.absarc(origin.x + innerRadius, origin.y + innerRadius * 2, innerRadius, Math.PI * 1.5, 0, false);
    path.lineTo(origin.x + innerRadius * 2 - deep, origin.y + innerRadius * 2);
    path.absarc(origin.x + innerRadius, origin.y + innerRadius * 2, innerRadius - deep, 0, Math.PI * 1.5, true);
    path.absarc(origin.x + innerRadius, origin.y, innerRadius + deep, Math.PI / 2, Math.PI, false);

    const extrudeSettings = { depth: 5, bevelEnabled: false };
    const geo = new THREE.ExtrudeGeometry(path, extrudeSettings);
    const geoMat = new THREE.MeshBasicMaterial({ color: 'red', wireframe: false });
    const mesh = new THREE.Mesh(geo, geoMat);
    mesh.rotateY(Math.PI / 2);

    const lineMaterial = new THREE.LineBasicMaterial({ color: 'white' });
    const line = new THREE.Line(geo, lineMaterial);
    mesh.add(line);

    return mesh;
}

function fun23() {
    const lockHeight = 10, lockWidth = 9.5;
    const path = new THREE.Shape();
    const origin = new THREE.Vector2(0, 0);
    
    path.quadraticCurveTo(origin.x + 1, origin.y, origin.x + 0.5, origin.y + lockHeight / 2);
    path.quadraticCurveTo(origin.x, origin.y + lockHeight - lockHeight / 4, origin.x - lockWidth / 3, origin.y + lockHeight);
    path.quadraticCurveTo(origin.x - lockWidth / 3 - lockWidth / 4, origin.y + lockHeight + 0.4, origin.x - lockWidth / 3 - lockWidth / 2, origin.y + lockHeight);
    path.quadraticCurveTo(origin.x - lockWidth / 3 - lockWidth / 2 - lockWidth / 6, origin.y + lockHeight - lockHeight / 6, origin.x - lockWidth / 3 - lockWidth / 2 - lockWidth / 3, origin.y + lockHeight - lockHeight / 5);
    path.bezierCurveTo(origin.x - lockWidth, origin.y + lockHeight - lockHeight / 3, origin.x - lockWidth * 1.3, origin.y + lockHeight / 1.5, origin.x - lockWidth * 1.5, origin.y + lockHeight / 4);
    
    const extrudeSettings = { depth: 2, bevelEnabled: false };
    const geo = new THREE.ExtrudeGeometry(path, extrudeSettings);
    const geoMat = new THREE.MeshBasicMaterial({ color: 'red', wireframe: false });
    const mesh = new THREE.Mesh(geo, geoMat);
    mesh.position.set(origin.x + lockWidth / 2, origin.y + 59, -6);
    
    if (turnRight) {
        mesh.rotateY(Math.PI);
        mesh.position.set(origin.x + 0.25, origin.y + 59, -4);
    }

    const radius = lockHeight / 2.5;
    const hemisphereGeometry = new THREE.SphereGeometry(radius, 15, 15, 0, Math.PI);
    const matSphere = new THREE.MeshBasicMaterial({ color: 'green', wireframe: false });
    const sphereMesh = new THREE.Mesh(hemisphereGeometry, matSphere);
    sphereMesh.position.set(-lockWidth / 2, lockHeight / 2, 1);
    mesh.add(sphereMesh);

    if (turnRight) {
        sphereMesh.rotateY(Math.PI);
    }

    const curve = fun22();
    mesh.add(curve);

    const lock = fun21();
    mesh.add(lock);

    return mesh;
}

// Call the parent function
fun20();










//#region Render

window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();

//#endregion



